/**
 * @fileoverview Mock Firestore service.
 * In a real application, this file would contain functions to interact with the Firebase Firestore database.
 * For this mock implementation, it returns static data to simulate database interactions.
 */

import type { GenerateMeetingMinutesOutput } from "@/ai/flows/generate-meeting-minutes";

/**
 * Mocks fetching past participants for a given client from Firestore.
 * This function is used by the `suggest-participants` flow to provide context to the `minutaMaker` agent.
 *
 * @param clientId The ID of the client.
 * @returns A promise that resolves to an array of mock participant email addresses.
 */
export async function getPastParticipants(clientId: string): Promise<string[]> {
  console.log(`Mock Fetch: Past participants for client: ${clientId}`);

  // This is a mock database. In a real app, you'd query Firestore.
  const mockParticipantsDB: Record<string, string[]> = {
    cliente_A: ['ana.gomez@positiveit.com.ar', 'carlos.ruiz@external.com'],
    cliente_B: ['beatriz.luna@positiveit.com.ar', 'david.salas@anotherclient.com'],
    cliente_C: ['elena.cano@positiveit.com.ar'],
  };

  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 200));

  return mockParticipantsDB[clientId] || ['participante.generico@example.com'];
}

/**
 * Mocks saving a generated meeting minute to the Firestore database.
 * This function is part of the logic proposed by the user for the `minutaMaker` agent.
 *
 * @param clientId The ID of the client for whom the minute is being saved.
 * @param sourceDocumentUrl The URL of the source transcript document (if available).
 * @param minuteData The structured meeting minute data generated by the AI.
 * @returns A promise that resolves when the mock save operation is complete.
 */
export async function saveMinute(
    clientId: string,
    sourceDocumentUrl: string | undefined,
    minuteData: GenerateMeetingMinutesOutput
): Promise<void> {
  console.log(`Mock Save: Saving minute for client: ${clientId}`);
  console.log('Mock Save: Source URL:', sourceDocumentUrl || 'N/A');
  console.log('Mock Save: Minute Data:', minuteData);
  
  // Simulate a database write operation
  await new Promise(resolve => setTimeout(resolve, 300));
  
  console.log('Mock Save: Minute saved successfully.');
}
